@startuml class

enum RLActionType {
    ANY
    DISCRETE
    CONTINUOUS
}

enum RLObservationType {
    ANY
    DISCRETE
    CONTINUOUS
}

enum EnvObservationType {
    DISCRETE
    CONTINUOUS
    GRAY_2ch
    GRAY_3ch
    COLOR
    SHAPE2
    SHAPE3
}


abstract SpaceBase {
    sample()
    action_discrete()
    action_continuous()
    observation_discrete()
    observation_continuous()
}

note as SpaceMemo
DiscreteSpace
ArrayDiscreteSpace
ContinuousSpace
ArrayContinuousSpace
BoxSpace
end note

SpaceBase <|-- SpaceMemo


abstract EnvBase {
    action_space : SpaceBase
    observation_space : SpaceBase
    observation_type : EnvObservationType
    max_episode_steps : int
    player_num : int
    reset()
    step(actions, player_indices)
    backup()
    restore()
    render_terminal()
    render_gui()
    render_rgb_array()
    get_invalid_actions(player_index)
} 

EnvBase .. EnvObservationType
EnvBase -- SpaceBase


abstract gym.Env {
    action_space : gym.spaces.Space
    observation_space : gym.spaces.Space
    reset()
    step(action)
    render()
}
class GymWrapper {}

GymWrapper o-- gym.Env
EnvBase -- GymWrapper

abstract SpaceBase {

}

class EnvRun {
    state
    rewards
    done
    reset()
    step(actions)
    backup()
    restore()
    render()
    samples()
}
EnvRun o-- EnvBase

note "It retains the state \nat the time of episode execution." as EnvRunMemo
EnvRun .. EnvRunMemo


abstract RLWorker {
    config : RLConfig
    parameter : RLParameter
    remote_memory : RLRemoteMemory
    worker_id : int
    player_index: int
    on_reset()
    policy()
    on_step()
    render()
}


RLWorker - EnvRun

note "Absorbs the difference with \nthe environment.\n(action, observation)" as RLWorkerMemo
RLWorker .. RLWorkerMemo


abstract RLTrainer {
    config : RLConfig
    parameter : RLParameter
    remote_memory : RLRemoteMemory
    train()
    get_train_count()
}

abstract RLRemoteMemory {
    config : RLConfig
    backup()
    restore()
}

abstract RLParameter {
    config : RLConfig
    restore()
    backup()
}


abstract RLConfig {
    {static} getName() : str
    action_type : RLActionType
    observation_type : RLObservationType
}
RLActionType .. RLConfig
RLObservationType .. RLConfig

RLConfig --- RLWorker
RLConfig --- RLTrainer
RLConfig -- RLParameter
RLConfig -- RLRemoteMemory

RLParameter -- RLWorker
RLParameter -- RLTrainer
RLRemoteMemory -- RLWorker
RLRemoteMemory -- RLTrainer


@enduml