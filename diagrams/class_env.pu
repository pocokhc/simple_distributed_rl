@startuml class_env

enum EnvObservationType {
    DISCRETE
    CONTINUOUS
    GRAY_2ch
    GRAY_3ch
    COLOR
    SHAPE2
    SHAPE3
}


abstract SpaceBase {
    sample()
    get_default()
    rl_type
    n
    encode_to_int()
    decode_from_int()
    encode_to_int_np()
    decode_from_int_np()
    list_size
    list_low
    list_high
    encode_to_list_float()
    decode_from_list_float()
    shape
    low
    high
    encode_to_np()
    decode_from_np()
}


note as SpaceMemo
- DiscreteSpace
- ArrayDiscreteSpace
- ContinuousSpace
- ArrayContinuousSpace
- BoxSpace
end note

SpaceBase <|-- SpaceMemo


abstract EnvBase {
    action_space : SpaceBase
    observation_space : SpaceBase
    observation_type : EnvObservationType
    max_episode_steps : int
    player_num : int
    reset()
    step(action)
    next_player_index: int
    backup()
    restore()
    close()
    get_invalid_actions()
    render_terminal()
    render_rgb_array()
} 

EnvBase .. EnvObservationType
EnvBase -- SpaceBase

abstract gymnasium.Env {}
abstract gym.Env {}
class GymnasiumWrapper {}
class GymWrapper {}

GymnasiumWrapper o-- gymnasium.Env
GymWrapper o-- gym.Env
EnvBase -- GymnasiumWrapper
EnvBase -- GymWrapper


class EnvRun {
    reset(render_mode, seed)
    step(action)
    backup()
    restore()
    render()
    sample()
    property_infos
}
EnvRun o-- EnvBase

note "Keeps run-time state." as EnvRunMemo
EnvRun . EnvRunMemo


class EnvConfig {
    name : str
    kwargs : dict
}
EnvRun -- EnvConfig


@enduml