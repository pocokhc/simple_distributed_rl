@startuml class_rl

enum RLTypes {
    ANY
    DISCRETE
    CONTINUOUS
}


class EnvRun {}


class WorkerRun {
    on_reset(env, player_index, render_mode)
    policy(env)
    on_step(env)
    render()
}

WorkerRun - EnvRun

note "Keeps run-time state." as WorkerRunMemo
WorkerRun . WorkerRunMemo


abstract WorkerBase {
    on_reset()
    policy()
    on_step()
    render_terminal()
    render_rgb_array()
}
WorkerBase -- WorkerRun


abstract RuleBaseWorker {
    call_on_reset()
    call_policy()
    call_on_step()
}

RuleBaseWorker -- WorkerBase


abstract ExtendWorker {
    call_on_reset()
    call_policy()
    call_on_step()
}

ExtendWorker -- WorkerBase


abstract RLWorker {
    config : RLConfig
    parameter : RLParameter
    remote_memory : RLRemoteMemory
    actor_id : int
    call_on_reset()
    call_policy()
    call_on_step()
}


RLWorker -- WorkerBase

note "Absorbs the difference with \nthe environment.\n(action, observation)" as RLWorkerMemo
RLWorker .. RLWorkerMemo


abstract RLTrainer {
    config : RLConfig
    parameter : RLParameter
    remote_memory : RLRemoteMemory
    train()
    get_train_count() : int
}

abstract RLRemoteMemory {
    config : RLConfig
    backup()
    restore()
}

abstract RLParameter {
    config : RLConfig
    length() : int
    restore()
    backup()
}

abstract RLConfig {
    getName() : str
    action_type : RLTypes
    observation_type : RLTypes
}

RLTypes .. RLConfig

RLConfig --- RLWorker
RLConfig --- RLTrainer
RLConfig -- RLParameter
RLConfig -- RLRemoteMemory

RLParameter -- RLWorker
RLParameter -- RLTrainer
RLRemoteMemory -- RLWorker
RLRemoteMemory -- RLTrainer

@enduml