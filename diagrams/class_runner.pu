@startuml class_runner

abstract base.EnvConfig {}
abstract base.RLConfig {}
class base.RunContext {
    env_config : EnvConfig
    rl_config : RLConfig
    run_name : str
    Other run context variables
}
class base.RunState {
    env: EnvRun
    workers: RLWorker
    trainer: RLTrainer
    Other running state variables
}


' --- registration

base.EnvConfig -- base.registration
base.RLConfig -- base.registration

interface base.registration {
    make_env()
    make_memory()
    make_parameter()
    make_trainer()
    make_worker()
}


' --- run

base.RunContext -- base.run
base.RunState -- base.run

interface base.run {
    context : RunContext
    state : RunState
    play(context, env, workers, trainer)
    play_trainer_only(context, trainer)
}
note as base.BaseRunMemo
Play according to RunContext
end note
base.run <|- base.BaseRunMemo

base.registration .> base.run : Run with the maked one. >

' --- Runner

class Runner {
    .. play info ..
    env_config : EnvConfig
    rl_config : RLConfig
    context : RunContext
    .. keep instance ..
    env : EnvRyn
    parameter : RLParameter
    memory : RLMemory
    .. facade ..
    core_play()
}
base.registration <.. Runner : call <
base.run <.. Runner : call <

note as RunnerMemo
- facade of play
- keep instance
end note
Runner <|- RunnerMemo


circle User
User -> Runner : Used >

@enduml